using BenchmarkTools

function fast1!(out::Vector{Float64}, multiplication_table::Vector{Vector{Tuple{Int, Int}}}, x::Vector{Float64})
    Np = length(multiplication_table)
    out .= 0.0
    for i in 1:Np
        for (index, coeff) in multiplication_table[i]
            # @inbounds out[i] = muladd(coeff, x[index], out[i])
            out[i] += coeff * x[index]
        end
    end
    return out
end


"""
out = Ax

where A =

0 7 0 5
0 6 21 0
0 0 3 0
1 0 2 4
"""

multiplication_table = [
    [(2,7), (4,5)], # (col, value)
    [(2,6), (3,21)],
    [(3,3)],
    [(1,1), (3,2), (4,1)]
]

x = [
    10.0,
    20.0,
    30.0,
    40.
]

out = similar(x)

@btime fast1!(out, multiplication_table, x)